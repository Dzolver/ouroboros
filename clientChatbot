import random
import operator
import nltk
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
import treeObjectCreator as PyTree
import BrainCalculator as PyBrain
import wishLogCreator as PyWish
import os
import subprocess
import tkinter

from nltk.stem import PorterStemmer
from nltk.stem import LancasterStemmer


#-------------------------------------------FILE READING----------------------------------------------------------------
with open('GreetingWords.txt') as f:
    Greets = f.read().splitlines()
with open('GreetingResponses.txt') as g:
    Responses = g.read().splitlines()
with open('question_starters.txt') as qt:
    question_starters = qt.read().splitlines()
with open('nounlist.txt') as n:
    Nouns = n.read().splitlines()
with open('adjectives.txt') as adj:
    Adjectives = adj.read().splitlines()
with open('connectors.txt') as conn:
    Connectors = conn.read().splitlines()
#-------------------------------------------FILE READING----------------------------------------------------------------
CSTATUS = '\033[33m'
COUTPUT = '\33[92m'
CEND = '\033[0m'
important_noun = ''
should_record = True
sig_max_value = 0
personal = 0
maxPos = 0
localCandidate = []
personal_array = []
#---------------------------------------------CORE FUNCTIONS------------------------------------------------------------
def createTree():
    t = open("localTree.txt","w+")

def updateTree():
    t = open("localTree.txt","w+")
    #update the tree with new object
def input_defrag(sentence):
    wordStruct = []
    for word in sentence.split(' '):
        wordStruct.append(word)
    return wordStruct

def assignPoints(wordStruct):
    porterStem = PorterStemmer()
    lancaster = LancasterStemmer()
    pointList = []
    nounList = []
    for word in wordStruct:
        points = 0
        if word in Nouns:
            points += 5
            nounList.append(word)
        elif word in question_starters:
            points += 3
        elif porterStem.stem(word) in Adjectives:
            print(porterStem.stem(word))
            points += 4
        elif word in Adjectives:
            print(word)
            print(CSTATUS + porterStem.stem(word) + ' is the root!' + CEND)
            points += 4
        elif word in Connectors:
            points += 2
        elif word == '?':
            points += 1
        else:
            points += 0
        pointList.append(points)
    print("FROM assignPoints() : " + str(pointList))
    find_redundant_noun(nounList)
    return pointList

def check_for_greetings(sentence):
    for word in sentence.split(' '):
        if word.lower() in Greets:
            return random.choice(Responses)
        else:
            sig_max_value = max(assignPoints(input_defrag(sentence)))
            ##sig_word = find_sig(sig_max_value,assignPoints(input_defrag(sentence)),sentence)
            sentenceStruct = input_defrag(sentence)
            sig_word = sentenceStruct[maxPos]
            #(sig_max_value)
            if find_whether_adjective(sig_word):
                print(sig_word + ' is an adjective! ')
                continue
            return sig_word + " ? "
def find_simple_object(posTAGs):
    max = 0
    maxPos = 0
    for item in posTAGs:
        points = 0
        pos = item[0]
        tag = item[1]
        if tag == 'NN':#NOUNS
            points += 15
        elif tag == 'NNS': #NOUNS PLURAL
            points += 15
        elif tag == 'NNP':#unidentified pronoun
            points += 20
        elif tag == 'JJ':#ADJECTIVES
            points += 5
        elif tag == 'PRP$':#NONSELF PERSPECTIVE
            points +=3
        elif tag == 'PRP':#SELF PERSPECTIVE
            points += 5
            prp = pos
            if prp == 'I':
                points += 20
        elif tag =='VBP':#VERB
            points +=7
        elif tag == 'VB':
            points += 7
        elif tag == 'VBD':
            points += 6
        elif tag == 'TO':
            points +=2
        elif tag == 'DI':
            points +=1
        elif tag == 'IN':
            points +=2
        elif tag == 'RB': #Example : do you STILL like me ?
            points +=4
        else:
            points = 0
        if points > max:
            max = points
            maxPos = pos
    return maxPos

def find_sig_max_value(posTAGs):
    position = 0
    personal = 0
    max_persona = 0
    max_persona_pos = 0
    max = 0
    max_pos = 0
    list_of_scores = []
    for item in posTAGs:
        pos = item[0]
        tag = item[1]
        points = 0
        personal = 0
        if tag == 'NN':#NOUNS
            points += 15
            if brainiac.find_object_node(pos):
                print("FOUND AN ENTRY!")
                points += 5
        elif tag == 'NNS': #NOUNS PLURAL
            points += 15
        elif tag == 'NNP':#unidentified pronoun
            points += 25
            if brainiac.find_object_node(pos):
                print("FOUND AN ENTRY!")
                points += 7
        elif tag == 'JJ':#ADJECTIVES
            points += 5
        elif tag == 'PRP$':#NONSELF PERSPECTIVE
            points +=3
        elif tag == 'PRP':#SELF PERSPECTIVE
            points += 5
            personal += 5
            prp = pos
            if prp == 'I':
                points += 25
                points += personal
        elif tag =='VBP':#VERB
            points +=7
            personal -= 2
        elif tag == 'VB':
            points += 7
        elif tag == 'VBD':
            points += 6
        elif tag == 'TO':
            points +=2
        elif tag == 'DI':
            points +=1
        elif tag == 'IN':
            points +=2
        elif tag == 'RB': #Example : do you STILL like me ?
            points +=4
        else:
            points = 0
        points = points + position
        if (points > max):
            max = points
            max_pos = position
        if (personal > max_persona):
            max_persona = personal
            max_persona_pos = position
        list_of_scores.append([pos,points])
        position +=1
        personal_array.append(personal)
        print(CSTATUS + str(personal_array) + CEND)
    if(max_persona >= max):
        localCandidate.append(str(posTAGs[max_persona_pos][0]))
    else:
        localCandidate.append(str(posTAGs[max_pos][0]))
    print(posTAGs)
    detail = sorted(list_of_scores,key=lambda x:x[1],reverse=True)[1][0]
    return personal, max, max_pos, detail, personal_array, list_of_scores


def find_sig(max,pointList,sentence):
    index = 0;
    sig_word = ''
    sentenceStruct = input_defrag(sentence)
    for point in pointList:
        if point == max:
            sig_word = sentenceStruct[index]
            return sig_word
        else:
            index +=1

def create_sentence(pointList,sentence):
    #use the pointlist to decide what question to ask or sentence to mention
    #first find out if the question is appropriate or the sentence is needed
    question = False;
    if pointList[-1] == 1:
        question = True
    else:
        question = False

#---------------------------------------------CORE FUNCTIONS------------------------------------------------------------
#--------------------------------------------SUPPORT FUNCTIONS----------------------------------------------------------
def find_important_noun(sentence):
    if len(input_defrag(sentence)) <= 2:
        print('short sentence')
    elif len(input_defrag(sentence)) > 2:
        print('long sentence')
    #find_whether_noun(sentence)
    ##assignPoints(input_defrag(sentence))
    #check_question(sentence)
def find_redundant_noun(listOfWords):
    uniqueList = {}
    for word in listOfWords:
        if word in uniqueList:
            uniqueList[word] += 1
        else:
            uniqueList[word] = 1
    print(uniqueList)
    if len(uniqueList) > 0 :
        important_noun = max(uniqueList.items(), key=operator.itemgetter(1))[0]
        print(important_noun + ' is the most common noun found!')
    else:
        print('no nouns are found!')

def find_whether_connector(word):
    if word in Connectors:
        return True

def length_of_input(sentence):
    count = 0
    for word in sentence.split(" "):
        count +=1
    return count

def find_whether_noun(sentence):
    for word in sentence.split(' '):
        if word.lower() in Nouns:
            print(word + ' is a noun!')
        else:
            print(" ")

def find_whether_adjective(word):
    if word in Adjectives:
        return True
    else:
        return False

def check_question(sentence):
    segments = []
    for word in sentence.split(' '):
        segments.append(word)
    if segments[-1] == '?':
        should_record = False
        print("QUESTION")
        return True
    else:
        should_record = True
        print("NOT A QUESTION")
        return False
#--------------------------------------------SUPPORT FUNCTIONS----------------------------------------------------------
#------------------------------------------------MAIN FUNCTION----------------------------------------------------------
if __name__ == '__main__':
    while True:
        sentence = input("You: ")
        if 'bye' in sentence:
            print('Ouroboros: Good Bye!')
            break

        object_name = 'TEST'
        branch_level = 1
        detail_name = 'Byung'
        detail_type = 'PERSONAL'
        personal_score = 0.8
        fam_score = 0.9
        unknown_score = 0.2
        sentiment_score = 0
        brainiac = PyBrain.BrainCalculator("","",1,0,0,0,sentence,sentiment_score)
        treeObject = PyTree.TreeObjectCreator(object_name, branch_level, detail_name, detail_type, sentence,
                                              personal_score, fam_score, unknown_score, sentiment_score)
        detail_array = []
        objLineNum, obj_found = treeObject.check_object_node(object_name)
        if brainiac.getSentenceLength(sentence) <= 2:
            object_name = find_simple_object(brainiac.justTAG(sentence))
            objLineNum, obj_found = treeObject.check_object_node(object_name)
            if not obj_found:
                response = "Can you tell me more about " + object_name + " ? "
            elif obj_found:
                response = "What about " + object_name + " ? "
        else:
            personal, sig_max_value, maxPos, detail_name, personal_array, list_of_scores = find_sig_max_value(
                brainiac.justTAG(sentence))
            print("THIS IS THE LOCAL CANDIDATE " + localCandidate[0])
            prime_candidate = brainiac.generate_object_candidates(sentence, localCandidate[0])
            object_name = prime_candidate[1]

            sentiment_scores = brainiac.generate_sentiment_score(sentence)
            print(CSTATUS +str(sentiment_scores['compound'])+CEND)
            sentiment_score = sentiment_scores['compound']
            print(CSTATUS+str(brainiac.generate_sentiment_score(sentence))+CEND)
            check_question(sentence)
            if sentiment_scores['compound']<0:
                print(CSTATUS+"This is a negative input!"+CEND)
            elif sentiment_scores['compound']>0:
                print(CSTATUS+"This is a positive input!"+CEND)
            else:
                print(CSTATUS+"This is a neutral input!"+CEND)
            #find_important_noun(sentence)
            #calculates and retrieves an initial score for both object and detail candidates

            #finalise the primary candidate for the object name

            personal_score = brainiac.generate_personality_score(personal_array)
            fam_score = brainiac.generate_fam_score(sentence)
            # prime_detail = brainiac.generate_detail_name(sentence,localCandidate[])


            response = check_for_greetings(sentence)
            #tree_node = np.rec.fromarrays((['TEST',1,'Byung','PERSONAL',sentence,0.8,0.9,0.2]),names=('record_data'))

            if personal_score <= 0.3:
                detail_type = 'GENERIC'
            elif (personal_score > 0.3) & (personal_score < 1.5):
                detail_type = 'PERSONAL'
            elif personal_score >= 1.5:
                detail_type = 'SECRET'
            objLineNum, obj_found = treeObject.check_object_node(object_name)
            if not obj_found:
                print("OBJ IS NEW")
                #detailCount,detailLineNum = treeObject.check_object_details(objLineNum)
                #print("the amount of details found under this object is " + str(detailCount))
                unknown_score = brainiac.generate_unknown_score(detail_name, detail_array)
                treeObject.add_object_node(object_name,branch_level,detail_name,detail_type,sentence,personal_score,fam_score,unknown_score,sentiment_score)
            elif obj_found:
                print(CSTATUS + str(len(sentence)) + CEND)
                count, detailLineNum, detail_array = treeObject.check_object_details(objLineNum)
                print(str(count) + " DETAILS FOUND!")
                print("LAST DETAIL FOUND IN LINE NUMBER " + str(detailLineNum))
                unknown_score = brainiac.generate_unknown_score(detail_name,detail_array)
                treeObject.add_detail_node(detailLineNum,branch_level,detail_name,detail_type,sentence,personal_score,fam_score,unknown_score,sentiment_score)
                wish = PyWish.wishLogCreator(object_name, detail_name, detailLineNum, sentence)
                wish.update_wish_log(object_name, detail_name, detailLineNum, sentence)
                #treeObject.show_object_nodes()

        generated_response = brainiac.generate_response(sentence,object_name,detail_name,check_question(sentence),personal_score,fam_score,unknown_score,sentiment_score,detail_array)
        print(COUTPUT + "Ouroboros: " + str(response) + CEND)
        #process = subprocess.Popen("sudo gnome-terminal -- python ouroServer.py",stdout = subprocess.PIPE,stderr=None,shell=True)
        #clear to get ready for new input
        localCandidate.clear()
        personal_array.clear()
#------------------------------------------------MAIN FUNCTION----------------------------------------------------------

